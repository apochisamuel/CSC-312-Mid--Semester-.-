// (2) Using stack ADT operations, write a procedure in C or any programming language that scans a string supplied by a user and determine whether the string is a palindrome or not

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_SIZE 100

struct Stack {
    int top;
    char items[MAX_SIZE];
};

void initialize(struct Stack* stack) {
    stack->top = -1;
}

int isEmpty(struct Stack* stack) {
    return stack->top == -1;
}

void push(struct Stack* stack, char item) {
    if (stack->top == MAX_SIZE - 1) {
        printf("Stack overflow\n");
        exit(EXIT_FAILURE);
    }
    stack->items[++stack->top] = item;
}

char pop(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack underflow\n");
        exit(EXIT_FAILURE);
    }
    return stack->items[stack->top--];
}

int isPalindrome(char* str) {
    struct Stack stack;
    initialize(&stack);

    int length = strlen(str);
    int i;

    for (i = 0; i < length / 2; i++) {
        push(&stack, str[i]);
    }

    for (i = (length + 1) / 2; i < length; i++) {
        if (str[i] != pop(&stack)) {
            return 0; // Not a palindrome
        }
    }

    return 1;
}

int main() {
    char input[100];

    printf("Enter a string: ");
    fgets(input, sizeof(input), stdin);

    input[strcspn(input, "\n")] = '\0';

    if (isPalindrome(input)) {
        printf("The entered string is a palindrome.\n");
    } else {
        printf("The entered string is not a palindrome.\n");
    }

    return 0;
}










// (3) write a fuction in c to perform push operation on dynamically allocated stack containing real numbers

#include <stdio.h>
#include <stdlib.h>


struct Stack {
    int top;
    int capacity;
    float *items;
};


void initialize(struct Stack *stack, int capacity) {
    stack->top = -1;
    stack->capacity = capacity;
    stack->items = (float *)malloc(capacity * sizeof(float));

    if (stack->items == NULL) {
        printf("Memory allocation error\n");
        exit(EXIT_FAILURE);
    }
}


int isFull(struct Stack *stack) {
    return stack->top == stack->capacity - 1;
}


int isEmpty(struct Stack *stack) {
    return stack->top == -1;
}


void push(struct Stack *stack, float item) {
    if (isFull(stack)) {
        printf("Stack overflow\n");
        exit(EXIT_FAILURE);
    }
    stack->items[++stack->top] = item;
}

int main() {
    struct Stack stack;
    int capacity;
    float value;

   
    printf("Enter the capacity of the stack: ");
    scanf("%d", &capacity);

   
    initialize(&stack, capacity);


    printf("Enter a real number to push onto the stack: ");
    scanf("%f", &value);

 
    push(&stack, value);

    printf("Value %f pushed onto the stack.\n", value);


    free(stack.items);

    return 0;
}
